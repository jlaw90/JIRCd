package com.sqrt4.jircd.model.cmd;

public interface NumericConstants {
    public static final int RPL_WELCOME = 1, //	RFC2812	:Welcome to the Internet Relay Network <nick>!<user>@<host>	The first message sent after client registration. The text used varies widely
            RPL_YOURHOST = 2, //	RFC2812	:Your host is <servername>, running version <version>	Part of the post-registration greeting. Text varies widely
            RPL_CREATED = 3, //	RFC2812	:This server was created <date>	Part of the post-registration greeting. Text varies widely
            RPL_MYINFO = 4, //	RFC2812	<server_name> <version> <user_modes> <chan_modes>	Part of the post-registration greeting	Same as RFC2812 however with additional fields to avoid additional 005 burden.
            RPL_ISUPPORT = 5, //			Also known as RPL_PROTOCTL (Bahamut, Unreal, Ultimate)
            RPL_BOUNCE = 10, //		<hostname> <port> :<info>	Sent to the client to redirect it to another server. Also known as RPL_REDIR
            RPL_STATMEM = 10, //	ircu
            RPL_YOURCOOKIE = 14, //	Hybrid?
            RPL_YOURID = 42, //	IRCnet
            RPL_SAVENICK = 43, //	IRCnet	:<info>	Sent to the client when their nickname was forced to change due to a collision
            RPL_ATTEMPTINGJUNC = 50, //	aircd
            RPL_ATTEMPTINGREROUTE = 51, //	aircd
            RPL_TRACELINK = 200, //	RFCLink = 1459, // <version>[.<debug_level>] <destination> <next_server> [V<protocol_version> <link_uptime_in_seconds> <backstream_sendq> <upstream_sendq>]	See RFC
            RPL_TRACECONNECTING = 201, //	RFCTry = 1459, //. <class> <server>	See RFC
            RPL_TRACEHANDSHAKE = 202, //	RFCH = 1459, //.S. <class> <server>	See RFC
            RPL_TRACEUNKNOWN = 203, //	RFC1459	???? <class> [<connection_address>]	See RFC
            RPL_TRACEOPERATOR = 204, //	RFCOper = 1459, // <class> <nick>	See RFC
            RPL_TRACEUSER = 205, //	RFCUser = 1459, // <class> <nick>	See RFC
            RPL_TRACESERVER = 206, //	RFCServ = 1459, // <class> <int>S <int>C <server> <nick!user|*!*>@<host|server> [V<protocol_version>]	See RFC
            RPL_TRACESERVICE = 207, //	RFCService = 2812, // <class> <name> <type> <active_type>	See RFC
            RPL_TRACENEWTYPE = 208, //	RFC1459	<newtype> 0 <client_name>	See RFC
            RPL_TRACECLASS = 209, //	RFCClass = 2812, // <class> <count>	See RFC
            RPL_TRACERECONNECT = 210, //	RFC2812
            RPL_STATS = 210, //	aircd		Used instead of having multiple stats numerics
            RPL_STATSLINKINFO = 211, //	RFC1459	<linkname> <sendq> <sent_msgs> <sent_bytes> <recvd_msgs> <rcvd_bytes> <time_open>	Reply to STATS (See RFC)
            RPL_STATSCOMMANDS = 212, //	RFC1459	<command> <count> [<byte_count> <remote_count>]	Reply to STATS (See RFC)
            RPL_STATSCLINE = 213, //	RFCC = 1459, // <host> * <name> <port> <class>	Reply to STATS (See RFC)
            RPL_STATSNLINE = 214, //	RFCN = 1459, // <host> * <name> <port> <class>	Reply to STATS (See RFC), Also known as RPL_STATSOLDNLINE (ircu, Unreal)
            RPL_STATSILINE = 215, //	RFCI = 1459, // <host> * <host> <port> <class>	Reply to STATS (See RFC)
            RPL_STATSKLINE = 216, //	RFCK = 1459, // <host> * <username> <port> <class>	Reply to STATS (See RFC)
            RPL_STATSQLINE = 217, //	RFC1459
            RPL_STATSYLINE = 218, //	RFCY = 1459, // <class> <ping_freq> <connect_freq> <max_sendq>	Reply to STATS (See RFC)
            RPL_ENDOFSTATS = 219, //	RFC1459	<query> :<info>	End of RPL_STATS* list.
            RPL_STATSPLINE = 220, //	Hybrid
            RPL_UMODEIS = 221, //	RFC1459	<user_modes> [<user_mode_params>]	Information about a user's own modes. Some daemons have extended the mode command and certain modes take parameters (like channel modes).
            RPL_SERVICEINFO = 231, //	RFC1459
            RPL_ENDOFSERVICES = 232, //	RFC1459
            RPL_SERVICE = 233, //	RFC1459
            RPL_SERVLIST = 234, //	RFC2812	<name> <server> <mask> <type> <hopcount> <info>	A service entry in the service list
            RPL_SERVLISTEND = 235, //	RFC2812	<mask> <type> :<info>	Termination of an RPL_SERVLIST list
            RPL_STATSVERBOSE = 236, //	ircu		Verbose server list?
            RPL_STATSENGINE = 237, //	ircu		Engine name?
            RPL_STATSFLINE = 238, //	ircu		Feature lines?
            RPL_STATSIAUTH = 239, //	IRCnet
            RPL_STATSVLINE = 240, //	RFC2812
            RPL_STATSLLINE = 241, //	RFCL = 1459, // <hostmask> * <servername> <maxdepth>	Reply to STATS (See RFC)
            RPL_STATSUPTIME = 242, //	RFC1459	:Server Up <days> days <hours>:<minutes>:<seconds>	Reply to STATS (See RFC)
            RPL_STATSOLINE = 243, //	RFCO = 1459, // <hostmask> * <nick> [:<info>]	Reply to STATS (See RFC); The info field is an extension found in some IRC daemons, which returns info such as an e-mail address or the name/job of an operator
            RPL_STATSHLINE = 244, //	RFCH = 1459, // <hostmask> * <servername>	Reply to STATS (See RFC)
            RPL_STATSSLINE = 245, //	Bahamut, IRCnet, Hybrid
            RPL_STATSPING = 246, //	RFC2812
            RPL_STATSTLINE = 246, //	ircu
            RPL_STATSBLINE = 247, //	RFC2812
            RPL_STATSXLINE = 247, //	Hybrid, PTlink, Unreal
            RPL_STATSGLINE = 247, //	ircu
            RPL_STATSDEFINE = 248, //	IRCnet
            RPL_STATSULINE = 249, //			Extension to RFC1459?
            RPL_STATSDEBUG = 249, //	Hybrid
            RPL_STATSDLINE = 250, //	RFC2812
            RPL_STATSCONN = 250, //	ircu, Unreal
            RPL_LUSERCLIENT = 251, //	RFC1459	:There are <int> users and <int> invisible on <int> servers	Reply to LUSERS command, other versions exist (eg. RFC2812); Text may vary.
            RPL_LUSEROP = 252, //	RFC1459	<int> :<info>	Reply to LUSERS command - Number of IRC operators online
            RPL_LUSERUNKNOWN = 253, //	RFC1459	<int> :<info>	Reply to LUSERS command - Number of unknown/unregistered connections
            RPL_LUSERCHANNELS = 254, //	RFC1459	<int> :<info>	Reply to LUSERS command - Number of channels formed
            RPL_LUSERME = 255, //	RFC1459	:I have <int> clients and <int> servers	Reply to LUSERS command - Information about local connections; Text may vary.
            RPL_ADMINME = 256, //	RFC1459	<server> :<info>	Start of an RPL_ADMIN* reply. In practise, the server parameter is often never given, and instead the info field contains the text 'Administrative info about <server>'. Newer daemons seem to follow the RFC and output the server's hostname in the 'server' parameter, but also output the server name in the text as per traditional daemons.
            RPL_ADMINLOC1 = 257, //RFC = 1, //1459	:<admin_location>	Reply to ADMIN command (Location, first line)
            RPL_ADMINLOC2 = 258, //RFC = 2, //1459	:<admin_location>	Reply to ADMIN command (Location, second line)
            RPL_ADMINEMAIL = 259, //	RFC1459	:<email_address>	Reply to ADMIN command (E-mail address of administrator)
            RPL_TRACELOG = 261, //	RFCFile = 1459, // <logfile> <debug_level>	See RFC
            RPL_TRACEPING = 262, //			Extension to RFC1459?
            RPL_TRACEEND = 262, //	RFC2812	<server_name> <version>[.<debug_level>] :<info>	Used to terminate a list of RPL_TRACE* replies
            RPL_TRYAGAIN = 263, //	RFC2812	<command> :<info>	When a server drops a command without processing it, it MUST use this reply. Also known as RPL_LOAD_THROTTLED and RPL_LOAD2HI, I'm presuming they do the same thing.
            RPL_LOCALUSERS = 265, //	aircd, Hybrid, Hybrid, Bahamut		Also known as RPL_CURRENT_LOCAL
            RPL_GLOBALUSERS = 266, //	aircd, Hybrid, Hybrid, Bahamut		Also known as RPL_CURRENT_GLOBAL
            RPL_START_NETSTAT = 267, //	aircd
            RPL_NETSTAT = 268, //	aircd
            RPL_END_NETSTAT = 269, //	aircd
            RPL_PRIVS = 270, //	ircu
            RPL_SILELIST = 271, //	ircu
            RPL_ENDOFSILELIST = 272, //	ircu
            RPL_NOTIFY = 273, //	aircd
            RPL_ENDNOTIFY = 274, //	aircd
            RPL_STATSDELTA = 274, //	IRCnet
            RPL_VCHANEXIST = 276, //
            RPL_VCHANLIST = 277, //
            RPL_VCHANHELP = 278, //
            RPL_GLIST = 280, //	ircu
            RPL_ENDOFGLIST = 281, //	ircu
            RPL_ACCEPTLIST = 281, //
            RPL_ENDOFACCEPT = 282, //
            RPL_JUPELIST = 282, //	ircu
            RPL_ENDOFJUPELIST = 283, //	ircu
            RPL_FEATURE = 284, //	ircu
            RPL_GLIST_HASH = 285, //
            RPL_CHANINFO_HANDLE = 285, //	aircd
            RPL_NEWHOSTIS = 285, //	QuakeNet
            RPL_CHANINFO_USERS = 286, //	aircd
            RPL_CHKHEAD = 286, //	QuakeNet
            RPL_CHANINFO_CHOPS = 287, //	aircd
            RPL_CHANUSER = 287, //	QuakeNet
            RPL_CHANINFO_VOICES = 288, //	aircd
            RPL_PATCHHEAD = 288, //	QuakeNet
            RPL_CHANINFO_AWAY = 289, //	aircd
            RPL_PATCHCON = 289, //	QuakeNet
            RPL_CHANINFO_OPERS = 290, //	aircd
            RPL_HELPHDR = 290, //	Unreal
            RPL_DATASTR = 290, //	QuakeNet
            RPL_CHANINFO_BANNED = 291, //	aircd
            RPL_HELPOP = 291, //	Unreal
            RPL_ENDOFCHECK = 291, //	QuakeNet
            RPL_CHANINFO_BANS = 292, //	aircd
            RPL_HELPTLR = 292, //	Unreal
            RPL_CHANINFO_INVITE = 293, //	aircd
            RPL_HELPHLP = 293, //	Unreal
            RPL_CHANINFO_INVITES = 294, //	aircd
            RPL_HELPFWD = 294, //	Unreal
            RPL_CHANINFO_KICK = 295, //	aircd
            RPL_HELPIGN = 295, //	Unreal
            RPL_CHANINFO_KICKS = 296, //	aircd
            RPL_END_CHANINFO = 299, //	aircd
            RPL_NONE = 300, //	RFC1459		Dummy reply, supposedly only used for debugging/testing new features, however has appeared in production daemons.
            RPL_AWAY = 301, //	RFC1459	<nick> :<message>	Used in reply to a command directed at a user who is marked as away
            RPL_USERHOST = 302, //	RFC1459	:*1<reply> *( ' ' <reply> )	Reply used by USERHOST (see RFC)
            RPL_ISON = 303, //	RFC1459	:*1<nick> *( ' ' <nick> )	Reply to the ISON command (see RFC)
            RPL_TEXT = 304, //
            RPL_UNAWAY = 305, //	RFC1459	:<info>	Reply from AWAY when no longer marked as away
            RPL_NOWAWAY = 306, //	RFC1459	:<info>	Reply from AWAY when marked away
            RPL_WHOISUSER = 311, //	RFC1459	<nick> <user> <host> * :<real_name>	Reply to WHOIS - Information about the user
            RPL_WHOISSERVER = 312, //	RFC1459	<nick> <server> :<server_info>	Reply to WHOIS - What server they're on
            RPL_WHOISOPERATOR = 313, //	RFC1459	<nick> :<privileges>	Reply to WHOIS - User has IRC Operator privileges
            RPL_WHOWASUSER = 314, //	RFC1459	<nick> <user> <host> * :<real_name>	Reply to WHOWAS - Information about the user
            RPL_ENDOFWHO = 315, //	RFC1459	<name> :<info>	Used to terminate a list of RPL_WHOREPLY replies
            RPL_WHOISCHANOP = 316, //	RFC1459
            RPL_WHOISIDLE = 317, //	RFC1459	<nick> <seconds> :seconds idle	Reply to WHOIS - Idle information
            RPL_ENDOFWHOIS = 318, //	RFC1459	<nick> :<info>	Reply to WHOIS - End of list
            RPL_WHOISCHANNELS = 319, //	RFC1459	<nick> :*( ( '@' / '+' ) <channel> ' ' )	Reply to WHOIS - Channel list for user (See RFC)
            RPL_WHOISVIRT = 320, //	AustHex
            RPL_WHOIS_HIDDEN = 320, //	Anothernet
            RPL_WHOISSPECIAL = 320, //	Unreal
            RPL_LISTSTART = 321, //	RFCChannels = 1459, // :Users Name	Channel list - Header
            RPL_LIST = 322, //	RFC1459	<channel> <#_visible> :<topic>	Channel list - A channel
            RPL_LISTEND = 323, //	RFC1459	:<info>	Channel list - End of list
            RPL_CHANNELMODEIS = 324, //	RFC1459	<channel> <mode> <mode_params>
            RPL_UNIQOPIS = 325, //	RFC2812	<channel> <nickname>
            RPL_CHANNELPASSIS = 325, //
            RPL_NOCHANPASS = 326, //
            RPL_CHPASSUNKNOWN = 327, //
            RPL_CHANNEL_URL = 328, //	Bahamut, AustHex
            RPL_CREATIONTIME = 329, //	Bahamut
            RPL_WHOWAS_TIME = 330, //
            RPL_WHOISACCOUNT = 330, //	ircu	<nick> <authname> :<info>
            RPL_NOTOPIC = 331, //	RFC1459	<channel> :<info>	Response to TOPIC when no topic is set
            RPL_TOPIC = 332, //	RFC1459	<channel> :<topic>	Response to TOPIC with the set topic
            RPL_CHANPASSOK = 338, //
            RPL_WHOISACTUALLY = 338, //	ircu, Bahamut
            RPL_BADCHANPASS = 339, //
            RPL_USERIP = 340, //	ircu
            RPL_INVITING = 341, //	RFC1459	<nick> <channel>	Returned by the server to indicate that the attempted INVITE message was successful and is being passed onto the end client. Note that RFC1459 documents the parameters in the reverse order. The format given here is the format used on production servers, and should be considered the standard reply above that given by RFC1459.
            RPL_SUMMONING = 342, //	RFC1459	<user> :<info>	Returned by a server answering a SUMMON message to indicate that it is summoning that user
            RPL_INVITED = 345, //	GameSurge	<channel> <user being invited> <user issuing invite> :<user being invited> has been invited by <user issuing invite>	Sent to users on a channel when an INVITE command has been issued
            RPL_INVITELIST = 346, //	RFC2812	<channel> <invitemask>	An invite mask for the invite mask list
            RPL_ENDOFINVITELIST = 347, //	RFC2812	<channel> :<info>	Termination of an RPL_INVITELIST list
            RPL_EXCEPTLIST = 348, //	RFC2812	<channel> <exceptionmask>	An exception mask for the exception mask list. Also known as RPL_EXLIST (Unreal, Ultimate)
            RPL_ENDOFEXCEPTLIST = 349, //	RFC2812	<channel> :<info>	Termination of an RPL_EXCEPTLIST list. Also known as RPL_ENDOFEXLIST (Unreal, Ultimate)
            RPL_VERSION = 351, //	RFC1459	<version>[.<debuglevel>] <server> :<comments>	Reply by the server showing its version details, however this format is not often adhered to
            RPL_WHOREPLY = 352, //	RFC1459	<channel> <user> <host> <server> <nick> <H|G>[*][@|+] :<hopcount> <real_name>	Reply to vanilla WHO (See RFC). This format can be very different if the 'WHOX' version of the command is used (see ircu).
            RPL_NAMREPLY = 353, //	RFC1459	( '=' / '*' / '@' ) <channel> ' ' : [ '@' / '+' ] <nick> *( ' ' [ '@' / '+' ] <nick> )	Reply to NAMES (See RFC)
            RPL_WHOSPCRPL = 354, //	ircu		Reply to WHO, however it is a 'special' reply because it is returned using a non-standard (non-RFC1459) format. The format is dictated by the command given by the user, and can vary widely. When this is used, the WHO command was invoked in its 'extended' form, as announced by the 'WHOX' ISUPPORT tag.
            RPL_NAMREPLY_ = 355, //	QuakeNet	( '=' / '*' / '@' ) <channel> ' ' : [ '@' / '+' ] <nick> *( ' ' [ '@' / '+' ] <nick> )	Reply to the "NAMES -d" command - used to show invisible users (when the channel is set +D, QuakeNet relative). The proper define name for this numeric is unknown at this time Also see #353.
            RPL_MAP = 357, //	AustHex
            RPL_MAPEND = 359, //	AustHex
            RPL_KILLDONE = 361, //	RFC1459
            RPL_CLOSING = 362, //	RFC1459
            RPL_CLOSEEND = 363, //	RFC1459
            RPL_LINKS = 364, //	RFC1459	<mask> <server> :<hopcount> <server_info>	Reply to the LINKS command
            RPL_ENDOFLINKS = 365, //	RFC1459	<mask> :<info>	Termination of an RPL_LINKS list
            RPL_ENDOFNAMES = 366, //	RFC1459	<channel> :<info>	Termination of an RPL_NAMREPLY list
            RPL_BANLIST = 367, //	RFC1459	<channel> <banid> [<time_left> :<reason>]	A ban-list item (See RFC); <time left> and <reason> are additions used by KineIRCd
            RPL_ENDOFBANLIST = 368, //	RFC1459	<channel> :<info>	Termination of an RPL_BANLIST list
            RPL_ENDOFWHOWAS = 369, //	RFC1459	<nick> :<info>	Reply to WHOWAS - End of list
            RPL_INFO = 371, //	RFC1459	:<string>	Reply to INFO
            RPL_MOTD = 372, //	RFC1459	:- <string>	Reply to MOTD
            RPL_INFOSTART = 373, //	RFC1459
            RPL_ENDOFINFO = 374, //	RFC1459	:<info>	Termination of an RPL_INFO list
            RPL_MOTDSTART = 375, //	RFC1459	:- <server> Message of the day -	Start of an RPL_MOTD list
            RPL_ENDOFMOTD = 376, //	RFC1459	:<info>	Termination of an RPL_MOTD list
            RPL_KICKEXPIRED = 377, //	aircd
            RPL_SPAM = 377, //	AustHex	:<text>	Used during the connection (after MOTD) to announce the network policy on spam and privacy. Supposedly now obsoleted in favour of using NOTICE.
            RPL_BANEXPIRED = 378, //	aircd
            RPL_KICKLINKED = 379, //	aircd
            RPL_BANLINKED = 380, //	aircd
            RPL_YOURHELPER = 380, //	AustHex
            RPL_YOUREOPER = 381, //	RFC1459	:<info>	Successful reply from OPER
            RPL_REHASHING = 382, //	RFC1459	<config_file> :<info>	Successful reply from REHASH
            RPL_YOURESERVICE = 383, //	RFC2812	:You are service <service_name>	Sent upon successful registration of a service
            RPL_MYPORTIS = 384, //	RFC1459
            RPL_NOTOPERANYMORE = 385, //	AustHex, Hybrid, Unreal
            RPL_QLIST = 386, //	Unreal
            RPL_IRCOPS = 386, //	Ultimate
            RPL_ENDOFQLIST = 387, //	Unreal
            RPL_ENDOFIRCOPS = 387, //	Ultimate
            RPL_ALIST = 388, //	Unreal
            RPL_ENDOFALIST = 389, //	Unreal
            RPL_TIME = 391, //	RFC1459	<server> :<time string>	Response to the TIME command. The string format may vary greatly. Also see #679.
            RPL_USERSSTART = 392, //	RFC1459	:UserID Terminal Host	Start of an RPL_USERS list
            RPL_USERS = 393, //	RFC1459	:<username> <ttyline> <hostname>	Response to the USERS command (See RFC)
            RPL_ENDOFUSERS = 394, //	RFC1459	:<info>	Termination of an RPL_USERS list
            RPL_NOUSERS = 395, //	RFC1459	:<info>	Reply to USERS when nobody is logged in
            RPL_HOSTHIDDEN = 396, //	Undernet		Reply to a user when user mode +x (host masking) was set successfully
            ERR_UNKNOWNERROR = 400, //		<command> [<?>] :<info>	Sent when an error occured executing a command, but it is not specifically known why the command could not be executed.
            ERR_NOSUCHNICK = 401, //	RFC1459	<nick> :<reason>	Used to indicate the nickname parameter supplied to a command is currently unused
            ERR_NOSUCHSERVER = 402, //	RFC1459	<server> :<reason>	Used to indicate the server name given currently doesn't exist
            ERR_NOSUCHCHANNEL = 403, //	RFC1459	<channel> :<reason>	Used to indicate the given channel name is invalid, or does not exist
            ERR_CANNOTSENDTOCHAN = 404, //	RFC1459	<channel> :<reason>	Sent to a user who does not have the rights to send a message to a channel
            ERR_TOOMANYCHANNELS = 405, //	RFC1459	<channel> :<reason>	Sent to a user when they have joined the maximum number of allowed channels and they tried to join another channel
            ERR_WASNOSUCHNICK = 406, //	RFC1459	<nick> :<reason>	Returned by WHOWAS to indicate there was no history information for a given nickname
            ERR_TOOMANYTARGETS = 407, //	RFC1459	<target> :<reason>	The given target(s) for a command are ambiguous in that they relate to too many targets
            ERR_NOSUCHSERVICE = 408, //	RFC2812	<service_name> :<reason>	Returned to a client which is attempting to send an SQUERY (or other message) to a service which does not exist
            ERR_NOCOLORSONCHAN = 408, //	Bahamut
            ERR_NOORIGIN = 409, //	RFC1459	:<reason>	PING or PONG message missing the originator parameter which is required since these commands must work without valid prefixes
            ERR_NORECIPIENT = 411, //	RFC1459	:<reason>	Returned when no recipient is given with a command
            ERR_NOTEXTTOSEND = 412, //	RFC1459	:<reason>	Returned when NOTICE/PRIVMSG is used with no message given
            ERR_NOTOPLEVEL = 413, //	RFC1459	<mask> :<reason>	Used when a message is being sent to a mask without being limited to a top-level domain (i.e. * instead of *.au)
            ERR_WILDTOPLEVEL = 414, //	RFC1459	<mask> :<reason>	Used when a message is being sent to a mask with a wild-card for a top level domain (i.e. *.*)
            ERR_BADMASK = 415, //	RFC2812	<mask> :<reason>	Used when a message is being sent to a mask with an invalid syntax
            ERR_TOOMANYMATCHES = 416, //	IRCnet	<command> [<mask>] :<info>	Returned when too many matches have been found for a command and the output has been truncated. An example would be the WHO command, where by the mask '*' would match everyone on the network! Ouch!
            ERR_QUERYTOOLONG = 416, //	ircu		Same as ERR_TOOMANYMATCHES
            ERR_LENGTHTRUNCATED = 419, //	aircd
            ERR_UNKNOWNCOMMAND = 421, //	RFC1459	<command> :<reason>	Returned when the given command is unknown to the server (or hidden because of lack of access rights)
            ERR_NOMOTD = 422, //	RFC1459	:<reason>	Sent when there is no MOTD to send the client
            ERR_NOADMININFO = 423, //	RFC1459	<server> :<reason>	Returned by a server in response to an ADMIN request when no information is available. RFC1459 mentions this in the list of numerics. While it's not listed as a valid reply in section 4.3.7 ('Admin command'), it's confirmed to exist in the real world.
            ERR_FILEERROR = 424, //	RFC1459	:<reason>	Generic error message used to report a failed file operation during the processing of a command
            ERR_NOOPERMOTD = 425, //	Unreal
            ERR_TOOMANYAWAY = 429, //	Bahamut
            ERR_EVENTNICKCHANGE = 430, //	AustHex		Returned by NICK when the user is not allowed to change their nickname due to a channel event (channel mode +E)
            ERR_NONICKNAMEGIVEN = 431, //	RFC1459	:<reason>	Returned when a nickname parameter expected for a command isn't found
            ERR_ERRONEUSNICKNAME = 432, //	RFC1459	<nick> :<reason>	Returned after receiving a NICK message which contains a nickname which is considered invalid, such as it's reserved ('anonymous') or contains characters considered invalid for nicknames. This numeric is misspelt, but remains with this name for historical reasons :)
            ERR_NICKNAMEINUSE = 433, //	RFC1459	<nick> :<reason>	Returned by the NICK command when the given nickname is already in use
            ERR_SERVICENAMEINUSE = 434, //	AustHex?
            ERR_NORULES = 434, //	Unreal, Ultimate
            ERR_SERVICECONFUSED = 435, //	Unreal
            ERR_BANONCHAN = 435, //	Bahamut
            ERR_NICKCOLLISION = 436, //	RFC1459	<nick> :<reason>	Returned by a server to a client when it detects a nickname collision
            ERR_UNAVAILRESOURCE = 437, //	RFC2812	<nick/channel/service> :<reason>	Return when the target is unable to be reached temporarily, eg. a delay mechanism in play, or a service being offline
            ERR_BANNICKCHANGE = 437, //	ircu
            ERR_NICKTOOFAST = 438, //	ircu		Also known as ERR_NCHANGETOOFAST (Unreal, Ultimate)
            ERR_DEAD = 438, //	IRCnet
            ERR_TARGETTOOFAST = 439, //	ircu		Also known as many other things, RPL_INVTOOFAST, RPL_MSGTOOFAST etc
            ERR_SERVICESDOWN = 440, //	Bahamut, Unreal
            ERR_USERNOTINCHANNEL = 441, //	RFC1459	<nick> <channel> :<reason>	Returned by the server to indicate that the target user of the command is not on the given channel
            ERR_NOTONCHANNEL = 442, //	RFC1459	<channel> :<reason>	Returned by the server whenever a client tries to perform a channel effecting command for which the client is not a member
            ERR_USERONCHANNEL = 443, //	RFC1459	<nick> <channel> [:<reason>]	Returned when a client tries to invite a user to a channel they're already on
            ERR_NOLOGIN = 444, //	RFC1459	<user> :<reason>	Returned by the SUMMON command if a given user was not logged in and could not be summoned
            ERR_SUMMONDISABLED = 445, //	RFC1459	:<reason>	Returned by SUMMON when it has been disabled or not implemented
            ERR_USERSDISABLED = 446, //	RFC1459	:<reason>	Returned by USERS when it has been disabled or not implemented
            ERR_NONICKCHANGE = 447, //	Unreal
            ERR_NOTIMPLEMENTED = 449, //	Undernet	Unspecified	Returned when a requested feature is not implemented (and cannot be completed)
            ERR_NOTREGISTERED = 451, //	RFC1459	:<reason>	Returned by the server to indicate that the client must be registered before the server will allow it to be parsed in detail
            ERR_IDCOLLISION = 452, //
            ERR_NICKLOST = 453, //
            ERR_HOSTILENAME = 455, //	Unreal
            ERR_ACCEPTFULL = 456, //
            ERR_ACCEPTEXIST = 457, //
            ERR_ACCEPTNOT = 458, //
            ERR_NOHIDING = 459, //	Unreal		Not allowed to become an invisible operator?
            ERR_NOTFORHALFOPS = 460, //	Unreal
            ERR_NEEDMOREPARAMS = 461, //	RFC1459	<command> :<reason>	Returned by the server by any command which requires more parameters than the number of parameters given
            ERR_ALREADYREGISTERED = 462, //	RFC1459	:<reason>	Returned by the server to any link which attempts to register again
            ERR_NOPERMFORHOST = 463, //	RFC1459	:<reason>	Returned to a client which attempts to register with a server which has been configured to refuse connections from the client's host
            ERR_PASSWDMISMATCH = 464, //	RFC1459	:<reason>	Returned by the PASS command to indicate the given password was required and was either not given or was incorrect
            ERR_YOUREBANNEDCREEP = 465, //	RFC1459	:<reason>	Returned to a client after an attempt to register on a server configured to ban connections from that client
            ERR_YOUWILLBEBANNED = 466, //	RFC1459		Sent by a server to a user to inform that access to the server will soon be denied
            ERR_KEYSET = 467, //	RFC1459	<channel> :<reason>	Returned when the channel key for a channel has already been set
            ERR_INVALIDUSERNAME = 468, //	ircu
            ERR_ONLYSERVERSCANCHANGE = 468, //	Bahamut, Unreal
            ERR_LINKSET = 469, //	Unreal
            ERR_LINKCHANNEL = 470, //	Unreal
            ERR_KICKEDFROMCHAN = 470, //	aircd
            ERR_CHANNELISFULL = 471, //	RFC1459	<channel> :<reason>	Returned when attempting to join a channel which is set +l and is already full
            ERR_UNKNOWNMODE = 472, //	RFC1459	<char> :<reason>	Returned when a given mode is unknown
            ERR_INVITEONLYCHAN = 473, //	RFC1459	<channel> :<reason>	Returned when attempting to join a channel which is invite only without an invitation
            ERR_BANNEDFROMCHAN = 474, //	RFC1459	<channel> :<reason>	Returned when attempting to join a channel a user is banned from
            ERR_BADCHANNELKEY = 475, //	RFC1459	<channel> :<reason>	Returned when attempting to join a key-locked channel either without a key or with the wrong key
            ERR_BADCHANMASK = 476, //	RFC2812	<channel> :<reason>	The given channel mask was invalid
            ERR_NOCHANMODES = 477, //	RFC2812	<channel> :<reason>	Returned when attempting to set a mode on a channel which does not support channel modes, or channel mode changes. Also known as ERR_MODELESS
            ERR_NEEDREGGEDNICK = 477, //	Bahamut, ircu, Unreal
            ERR_BANLISTFULL = 478, //	RFC2812	<channel> <char> :<reason>	Returned when a channel access list (i.e. ban list etc) is full and cannot be added to
            ERR_BADCHANNAME = 479, //	Hybrid
            ERR_LINKFAIL = 479, //	Unreal
            ERR_NOULINE = 480, //	AustHex
            ERR_CANNOTKNOCK = 480, //	Unreal
            ERR_NOPRIVILEGES = 481, //	RFC1459	:<reason>	Returned by any command requiring special privileges (eg. IRC operator) to indicate the operation was unsuccessful
            ERR_CHANOPRIVSNEEDED = 482, //	RFC1459	<channel> :<reason>	Returned by any command requiring special channel privileges (eg. channel operator) to indicate the operation was unsuccessful
            ERR_CANTKILLSERVER = 483, //	RFC1459	:<reason>	Returned by KILL to anyone who tries to kill a server
            ERR_RESTRICTED = 484, //	RFC2812	:<reason>	Sent by the server to a user upon connection to indicate the restricted nature of the connection (i.e. usermode +r)
            ERR_ISCHANSERVICE = 484, //	Undernet
            ERR_DESYNC = 484, //	Bahamut, Hybrid, PTlink
            ERR_ATTACKDENY = 484, //	Unreal
            ERR_UNIQOPRIVSNEEDED = 485, //	RFC2812	:<reason>	Any mode requiring 'channel creator' privileges returns this error if the client is attempting to use it while not a channel creator on the given channel
            ERR_KILLDENY = 485, //	Unreal
            ERR_CANTKICKADMIN = 485, //	PTlink
            ERR_ISREALSERVICE = 485, //	QuakeNet
            ERR_NONONREG = 486, //
            ERR_HTMDISABLED = 486, //	Unreal
            ERR_ACCOUNTONLY = 486, //	QuakeNet
            ERR_CHANTOORECENT = 487, //	IRCnet
            ERR_MSGSERVICES = 487, //	Bahamut
            ERR_TSLESSCHAN = 488, //	IRCnet
            ERR_VOICENEEDED = 489, //	Undernet
            ERR_SECUREONLYCHAN = 489, //	Unreal
            ERR_NOOPERHOST = 491, //	RFC1459	:<reason>	Returned by OPER to a client who cannot become an IRC operator because the server has been configured to disallow the client's host
            ERR_NOSERVICEHOST = 492, //	RFC1459
            ERR_NOFEATURE = 493, //	ircu
            ERR_BADFEATURE = 494, //	ircu
            ERR_BADLOGTYPE = 495, //	ircu
            ERR_BADLOGSYS = 496, //	ircu
            ERR_BADLOGVALUE = 497, //	ircu
            ERR_ISOPERLCHAN = 498, //	ircu
            ERR_CHANOWNPRIVNEEDED = 499, //	Unreal		Works just like ERR_CHANOPRIVSNEEDED except it indicates that owner status (+q) is needed. Also see #482.
            ERR_UMODEUNKNOWNFLAG = 501, //	RFC1459	:<reason>	Returned by the server to indicate that a MODE message was sent with a nickname parameter and that the mode flag sent was not recognised
            ERR_USERSDONTMATCH = 502, //	RFC1459	:<reason>	Error sent to any user trying to view or change the user mode for a user other than themselves
            ERR_GHOSTEDCLIENT = 503, //	Hybrid
            ERR_VWORLDWARN = 503, //	AustHex	:<warning_text>	Warning about Virtual-World being turned off. Obsoleted in favour for RPL_MODECHANGEWARN Also see #662.
            ERR_USERNOTONSERV = 504, //
            ERR_SILELISTFULL = 511, //	ircu
            ERR_TOOMANYWATCH = 512, //	Bahamut		Also known as ERR_NOTIFYFULL (aircd), I presume they are the same
            ERR_BADPING = 513, //	ircu		Also known as ERR_NEEDPONG (Unreal/Ultimate) for use during registration, however it's not used in Unreal (and might not be used in Ultimate either).
            ERR_INVALID_ERROR = 514, //	ircu
            ERR_TOOMANYDCC = 514, //	Bahamut
            ERR_BADEXPIRE = 515, //	ircu
            ERR_DONTCHEAT = 516, //	ircu
            ERR_DISABLED = 517, //	ircu	<command> :<info/reason>
            ERR_NOINVITE = 518, //	Unreal
            ERR_LONGMASK = 518, //	ircu
            ERR_ADMONLY = 519, //	Unreal
            ERR_TOOMANYUSERS = 519, //	ircu
            ERR_OPERONLY = 520, //	Unreal
            ERR_MASKTOOWIDE = 520, //	ircu
            ERR_WHOTRUNC = 520, //	AustHex		This is considered obsolete in favour of ERR_TOOMANYMATCHES, and should no longer be used. Also see #416.
            ERR_LISTSYNTAX = 521, //	Bahamut
            ERR_WHOSYNTAX = 522, //	Bahamut
            ERR_WHOLIMEXCEED = 523, //	Bahamut
            ERR_QUARANTINED = 524, //	ircu
            ERR_OPERSPVERIFY = 524, //	Unreal
            ERR_REMOTEPFX = 525, //	CAPAB USERCMDPFX	<nickname> :<reason>	Proposed.
            ERR_PFXUNROUTABLE = 526, //	CAPAB USERCMDPFX	<nickname> :<reason>	Proposed.
            ERR_BADHOSTMASK = 550, //	QuakeNet
            ERR_HOSTUNAVAIL = 551, //	QuakeNet
            ERR_USINGSLINE = 552, //	QuakeNet
            ERR_STATSSLINE = 553, //	QuakeNet
            RPL_LOGON = 600, //	Bahamut, Unreal
            RPL_LOGOFF = 601, //	Bahamut, Unreal
            RPL_WATCHOFF = 602, //	Bahamut, Unreal
            RPL_WATCHSTAT = 603, //	Bahamut, Unreal
            RPL_NOWON = 604, //	Bahamut, Unreal
            RPL_NOWOFF = 605, //	Bahamut, Unreal
            RPL_WATCHLIST = 606, //	Bahamut, Unreal
            RPL_ENDOFWATCHLIST = 607, //	Bahamut, Unreal
            RPL_WATCHCLEAR = 608, //	Ultimate
            RPL_ISOPER = 610, //	Ultimate
            RPL_ISLOCOP = 611, //	Ultimate
            RPL_ISNOTOPER = 612, //	Ultimate
            RPL_ENDOFISOPER = 613, //	Ultimate
            RPL_WHOISMODES = 615, //	Ultimate
            RPL_WHOISHOST = 616, //	Ultimate
            RPL_DCCSTATUS = 617, //	Bahamut
            RPL_WHOISBOT = 617, //	Ultimate
            RPL_DCCLIST = 618, //	Bahamut
            RPL_ENDOFDCCLIST = 619, //	Bahamut
            RPL_WHOWASHOST = 619, //	Ultimate
            RPL_DCCINFO = 620, //	Bahamut
            RPL_RULESSTART = 620, //	Ultimate
            RPL_RULES = 621, //	Ultimate
            RPL_ENDOFRULES = 622, //	Ultimate
            RPL_MAPMORE = 623, //	Ultimate
            RPL_ENDOFO = 626, //	Ultimate
            RPL_SETTINGS = 630, //	Ultimate
            RPL_ENDOFSETTINGS = 631, //	Ultimate
            RPL_DUMPING = 640, //	Unreal		Never actually used by Unreal - was defined however the feature that would have used this numeric was never created.
            RPL_DUMPRPL = 641, //	Unreal		Never actually used by Unreal - was defined however the feature that would have used this numeric was never created.
            RPL_EODUMP = 642, //	Unreal		Never actually used by Unreal - was defined however the feature that would have used this numeric was never created.
            RPL_TRACEROUTE_HOP = 660, //	KineIRCd	<target> <hop#> [<address> [<hostname> | '*'] <usec_ping>]	Returned from the TRACEROUTE IRC-Op command when tracerouting a host
            RPL_TRACEROUTE_START = 661, //	KineIRCd	<target> <target_FQDN> <target_address> <max_hops>	Start of an RPL_TRACEROUTE_HOP list
            RPL_MODECHANGEWARN = 662, //	KineIRCd	['+' | '-']<mode_char> :<warning>	Plain text warning to the user about turning on or off a user mode. If no '+' or '-' prefix is used for the mode char, '+' is presumed.
            RPL_CHANREDIR = 663, //	KineIRCd	<old_chan> <new_chan> :<info>	Used to notify the client upon JOIN that they are joining a different channel than expected because the IRC Daemon has been set up to map the channel they attempted to join to the channel they eventually will join.
            RPL_SERVMODEIS = 664, //	KineIRCd	<server> <modes> <parameters>..	Reply to MODE <servername>. KineIRCd supports server modes to simplify configuration of servers; Similar to RPL_CHANNELMODEIS
            RPL_OTHERUMODEIS = 665, //	KineIRCd	<nickname> <modes>	Reply to MODE <nickname> to return the user-modes of another user to help troubleshoot connections, etc. Similar to RPL_UMODEIS, however including the target
            RPL_ENDOF_GENERIC = 666, //	KineIRCd	<command> [<parameter> ...] :<info>	Generic response for new lists to save numerics.
            RPL_WHOWASDETAILS = 670, //	KineIRCd	<nick> <type> :<information>	Returned by WHOWAS to return extended information (if available). The type field is a number indication what kind of information.
            RPL_WHOISSECURE = 671, //	KineIRCd	<nick> <type> [:<info>]	Reply to WHOIS command - Returned if the target is connected securely, eg. type may be TLSv1, or SSLv2 etc. If the type is unknown, a '*' may be used.
            RPL_UNKNOWNMODES = 672, //	Ithildin	<modes> :<info>	Returns a full list of modes that are unknown when a client issues a MODE command (rather than one numeric per mode)
            RPL_CANNOTSETMODES = 673, //	Ithildin	<modes> :<info>	Returns a full list of modes that cannot be set when a client issues a MODE command
            RPL_LUSERSTAFF = 678, //	KineIRCd	<staff_online_count> :<info>	Reply to LUSERS command - Number of network staff (or 'helpers') online (differs from Local/Global operators). Similar format to RPL_LUSEROP
            RPL_TIMEONSERVERIS = 679, //	KineIRCd	<seconds> [<nanoseconds> | '0'] <timezone> <flags> :<info>	Optionally sent upon connection, and/or sent as a reply to the TIME command. This returns the time on the server in a uniform manner. The seconds (and optionally nanoseconds) is the time since the UNIX Epoch, and is used since many existing timestamps in the IRC-2 protocol are done this way (i.e. ban lists). The timezone is hours and minutes each of Greenwich ('[+/-]HHMM'). Since all timestamps sent from the server are in a similar format, this numeric is designed to give clients the ability to provide accurate timestamps to their users.
            RPL_NETWORKS = 682, //	KineIRCd	<name> <through_name> <hops> :<info>	A reply to the NETWORKS command when requesting a list of known networks (within the IIRC domain).
            RPL_YOURLANGUAGEIS = 687, //	KineIRCd	<code(s)> :<info>	Reply to the LANGUAGE command, informing the client of the language(s) it has set
            RPL_LANGUAGE = 688, //	KineIRCd	<code> <revision> <maintainer> <flags> * :<info>	A language reply to LANGUAGE when requesting a list of known languages
            RPL_WHOISSTAFF = 689, //	KineIRCd	:<info>	The user is a staff member. The information may explain the user's job role, or simply state that they are a part of the network staff. Staff members are not IRC operators, but rather people who have special access in association with network services. KineIRCd uses this numeric instead of the existing numerics due to the overwhelming number of conflicts.
            RPL_WHOISLANGUAGE = 690, //	KineIRCd	<nick> <language codes>	Reply to WHOIS command - A list of languages someone can speak. The language codes are comma delimitered.
            RPL_MODLIST = 702, //	RatBox	<?> 0x<?> <?> <?>	Output from the MODLIST command
            RPL_ENDOFMODLIST = 703, //	RatBox	:<text>	Terminates MODLIST output
            RPL_HELPSTART = 704, //	RatBox	<command> :<text>	Start of HELP command output
            RPL_HELPTXT = 705, //	RatBox	<command> :<text>	Output from HELP command
            RPL_ENDOFHELP = 706, //	RatBox	<command> :<text>	End of HELP command output
            RPL_ETRACEFULL = 708, //	RatBox	<?> <?> <?> <?> <?> <?> <?> :<?>	Output from 'extended' trace
            RPL_ETRACE = 709, //	RatBox	<?> <?> <?> <?> <?> <?> :<?>	Output from 'extended' trace
            RPL_KNOCK = 710, //	RatBox	<channel> <nick>!<user>@<host> :<text>	Message delivered using KNOCK command
            RPL_KNOCKDLVR = 711, //	RatBox	<channel> :<text>	Message returned from using KNOCK command
            ERR_TOOMANYKNOCK = 712, //	RatBox	<channel> :<text>	Message returned when too many KNOCKs for a channel have been sent by a user
            ERR_CHANOPEN = 713, //	RatBox	<channel> :<text>	Message returned from KNOCK when the channel can be freely joined by the user
            ERR_KNOCKONCHAN = 714, //	RatBox	<channel> :<text>	Message returned from KNOCK when the user has used KNOCK on a channel they have already joined
            ERR_KNOCKDISABLED = 715, //	RatBox	:<text>	Returned from KNOCK when the command has been disabled
            RPL_TARGUMODEG = 716, //	RatBox	<nick> :<info>	Sent to indicate the given target is set +g (server-side ignore)
            RPL_TARGNOTIFY = 717, //	RatBox	<nick> :<info>	Sent following a PRIVMSG/NOTICE to indicate the target has been notified of an attempt to talk to them while they are set +g
            RPL_UMODEGMSG = 718, //	RatBox	<nick> <user>@<host> :<info>	Sent to a user who is +g to inform them that someone has attempted to talk to them (via PRIVMSG/NOTICE), and that they will need to be accepted (via the ACCEPT command) before being able to talk to them
            RPL_OMOTDSTART = 720, //	RatBox	:<text>	IRC Operator MOTD header, sent upon OPER command
            RPL_OMOTD = 721, //	RatBox	:<text>	IRC Operator MOTD text (repeated, usually)
            RPL_ENDOFOMOTD = 722, //	RatBox	:<text>	IRC operator MOTD footer
            ERR_NOPRIVS = 723, //	RatBox	<command> :<text>	Returned from an oper command when the IRC operator does not have the relevant operator privileges.
            RPL_TESTMARK = 724, //	RatBox	<nick>!<user>@<host> <?> <?> :<text>	Reply from an oper command reporting how many users match a given user@host mask
            RPL_TESTLINE = 725, //	RatBox	<?> <?> <?> :<?>	Reply from an oper command reporting relevant I/K lines that will match a given user@host
            RPL_NOTESTLINE = 726, //	RatBox	<?> :<text>	Reply from oper command reporting no I/K lines match the given user@host
            RPL_XINFO = 771, //	Ithildin		Used to send 'eXtended info' to the client, a replacement for the STATS command to send a large variety of data and minimise numeric pollution.
            RPL_XINFOSTART = 773, //	Ithildin		Start of an RPL_XINFO list
            RPL_XINFOEND = 774, //	Ithildin		Termination of an RPL_XINFO list
            ERR_CANNOTDOCOMMAND = 972, //	Unreal		Works similarly to all of KineIRCd's CANNOT* numerics. This one indicates that a command could not be performed for an arbitrary reason. For example, a halfop trying to kick an op.
            ERR_CANNOTCHANGEUMODE = 973, //	KineIRCd	<mode_char> :<reason>	Reply to MODE when a user cannot change a user mode
            ERR_CANNOTCHANGECHANMODE = 974, //	KineIRCd	<mode_char> :<reason>	Reply to MODE when a user cannot change a channel mode
            ERR_CANNOTCHANGESERVERMODE = 975, //	KineIRCd	<mode_char> :<reason>	Reply to MODE when a user cannot change a server mode
            ERR_CANNOTSENDTONICK = 976, //	KineIRCd	<nick> :<reason>	Returned from NOTICE, PRIVMSG or other commands to notify the user that they cannot send a message to a particular client. Similar to ERR_CANNOTSENDTOCHAN. KineIRCd uses this in conjunction with user-mode +R to allow users to block people who are not identified to services (spam avoidance)
            ERR_UNKNOWNSERVERMODE = 977, //	KineIRCd	<modechar> :<info>	Returned by MODE to inform the client they used an unknown server mode character.
            ERR_SERVERMODELOCK = 979, //	KineIRCd	<target> :<info>	Returned by MODE to inform the client the server has been set mode +L by an administrator to stop server modes being changed
            ERR_BADCHARENCODING = 980, //	KineIRCd	<command> <charset> :<info>	Returned by any command which may have had the given data modified because one or more glyphs were incorrectly encoded in the current charset (given). Such a use would be where an invalid UTF-8 sequence was given which may be considered insecure, or defines a character which is invalid within that context. For safety reasons, the invalid character is not returned to the client.
            ERR_TOOMANYLANGUAGES = 981, //	KineIRCd	<max_langs> :<info>	Returned by the LANGUAGE command to tell the client they cannot set as many languages as they have requested. To assist the client, the maximum languages which can be set at one time is given, and the language settings are not changed.
            ERR_NOLANGUAGE = 982, //	KineIRCd	<language_code> :<info>	Returned by the LANGUAGE command to tell the client it has specified an unknown language code.
            ERR_TEXTTOOSHORT = 983, //	KineIRCd	<command> :<info>	Returned by any command requiring text (such as a message or a reason), which was not long enough to be considered valid. This was created initially to combat '/wallops foo' abuse, but is also used by DIE and RESTART commands to attempt to encourage meaningful reasons.
            ERR_NUMERIC_ERR = 999; //	Bahamut		Also known as ERR_NUMERICERR (Unreal)
}